{"version":3,"sources":["../src/cli.ts","../src/main.ts","../src/index.ts"],"sourcesContent":["import arg from \"arg\";\r\nimport inquirer from \"inquirer\";\r\nimport { createT3SvelteApp } from \"./main.js\";\r\n\r\ntype CheckBoxChoices = readonly { name: string; checked?: boolean }[];\r\ntype ListChoices = readonly string[];\r\n\r\ntype Question<T extends ListChoices | CheckBoxChoices> = {\r\n  message: string;\r\n  readonly choices?: T;\r\n  default?: string;\r\n  mask?: boolean;\r\n};\r\n\r\ntype InquirersTransform<T extends Record<string, Question<ListChoices | CheckBoxChoices>>> = { [P in keyof T]: InquirersRecordValue<T[P]> };\r\ntype InquirersRecordValue<T extends Question<ListChoices | CheckBoxChoices>> = T[\"choices\"] extends CheckBoxChoices\r\n  ? Array<string>\r\n  : T[\"choices\"] extends ListChoices\r\n  ? T[\"choices\"][number]\r\n  : string;\r\n\r\nconst prompt = async <T extends Record<string, Question<ListChoices | CheckBoxChoices>>>(questions: T) => {\r\n  const transformedQuestions = Object.entries(questions).map(([name, question]) => {\r\n    const choices = question.choices;\r\n    const type = choices ? (typeof choices[0] === \"string\" ? \"list\" : \"checkbox\") : question.mask ? \"password\" : \"input\";\r\n\r\n    return {\r\n      ...question,\r\n      name,\r\n      type,\r\n    };\r\n  });\r\n  const answers = await inquirer.prompt(transformedQuestions);\r\n  return answers as InquirersTransform<T>;\r\n};\r\n\r\nconst parseArgumentsIntoOptions = (rawArgs: string[]) => {\r\n  const args = arg({ \"--yes\": Boolean }, { argv: rawArgs.slice(2) });\r\n  return {\r\n    skipPrompts: args[\"--yes\"] || false,\r\n    template: args._[0],\r\n  };\r\n};\r\n\r\nexport const promptForMissingOptions = async (options: ReturnType<typeof parseArgumentsIntoOptions>) => {\r\n  const defaultTemplate = \"TypeScript\";\r\n\r\n  // Removed sinces it's not fully implemented yet\r\n  /* if (options.skipPrompts && false) {\r\n    return {\r\n      ...options,\r\n      template: options.template || defaultTemplate,\r\n      targetDirectory: \"create-t3svelte-app\" + new Date().toString(),\r\n    };\r\n  } */\r\n\r\n  const baseQuestions = {\r\n    targetDirectory: {\r\n      message: \"Please choose project name:\",\r\n    },\r\n    template: {\r\n      message: \"Please choose which project template to use\",\r\n      choices: [/* \"Standard\",  */ \"TypeScript\", \"JavaScript\"] as const, // removed standard since it's not fully implemented yet (or at least didn't work for me all the time)\r\n      default: defaultTemplate,\r\n    },\r\n  };\r\n\r\n  const typeScriptQuestions = {\r\n    options: {\r\n      message: \"Please choose tech stack options\",\r\n      choices: [\r\n        { name: \"tRPC\", checked: true },\r\n        { name: \"Prisma ORM\", checked: true },\r\n        { name: \"Tailwind CSS\", checked: true },\r\n      ] as const,\r\n    },\r\n  };\r\n\r\n  const javaScriptQuestions = {\r\n    options: {\r\n      message: \"Please choose tech stack options\",\r\n      choices: [\r\n        { name: \"Prisma ORM\", checked: true },\r\n        { name: \"Tailwind CSS\", checked: true },\r\n      ] as const,\r\n    },\r\n  };\r\n\r\n  let toolQuestions = {\r\n    options: {\r\n      message: \"Please choose tech stack options\",\r\n      choices: [\r\n        { name: \"ESLint\", checked: true },\r\n        { name: \"Prettier\", checked: true },\r\n        { name: \"Tailwind Prettier\", checked: true },\r\n        { name: \"Headless UI\" },\r\n        { name: \"HeroIcons\" },\r\n      ] as const,\r\n    },\r\n  };\r\n\r\n  const configQuestions = {\r\n    options: {\r\n      message: \"Please choose config options\",\r\n      choices: [\r\n        { name: \"Configure database\", checked: true },\r\n        { name: \"Init .git\", checked: true },\r\n        { name: \"Auto install dependencies\", checked: true },\r\n      ] as const,\r\n    },\r\n  };\r\n\r\n  const dbSolutions = {\r\n    dbSolution: {\r\n      message: \"What DB technology are you using? (first 3 require URI string)\",\r\n      choices: [\"Postgres\", \"MySQL\", \"MongoDB\", \"SQLite\", \"Other\"] as const,\r\n      default: \"Postgres\",\r\n    },\r\n  };\r\n\r\n  //Inquirer Fork 3 (if needed)\r\n  const dbQuestions = {\r\n    dbString: {\r\n      mask: true,\r\n      message: \"Enter Full DB URI String:\",\r\n    },\r\n    dbOperation: {\r\n      message: \"Init new DB schema (blank DB) or import schema from existing DB?\",\r\n      choices: [\"New Schema\", \"Import Existing Schema\"] as const,\r\n      default: \"New Schema\",\r\n    },\r\n  } as const;\r\n\r\n  /*                                    */\r\n  /* Process Forks and Prompt Questions */\r\n\r\n  let techOptions: string[] = [\"tRPC\", \"Prisma ORM\", \"Tailwind CSS\", \"TypeScript\"];\r\n  let toolOptions: string[] = [\"ESLint\", \"Prettier\", \"Tailwind Prettier\"];\r\n  let isStandard = false;\r\n\r\n  // Base Config\r\n  const baseAnswers = await prompt(baseQuestions);\r\n  switch (baseAnswers.template) {\r\n    case \"TypeScript\":\r\n      const typescriptAnswers = await prompt(typeScriptQuestions);\r\n      techOptions = [...typescriptAnswers.options, \"TypeScript\"];\r\n      break;\r\n    case \"JavaScript\":\r\n      const javascriptAnswers = await prompt(javaScriptQuestions);\r\n      techOptions = [...javascriptAnswers.options, \"JavaScript\"];\r\n      break;\r\n    default:\r\n      isStandard = true;\r\n  }\r\n\r\n  // Non-Standard Config\r\n  if (!isStandard) {\r\n    if (techOptions.includes(\"Tailwind CSS\")) {\r\n      const toolAnswers = await prompt(toolQuestions);\r\n      toolOptions = toolAnswers.options;\r\n    } else {\r\n      // remove Tailwind Prettier from toolOptions\r\n      const newToolChoices = toolQuestions.options.choices.filter((object) => object.name !== \"Tailwind Prettier\");\r\n      const newToolQuestions = { ...toolQuestions, options: { ...toolQuestions.options, choices: newToolChoices } };\r\n\r\n      const toolAnswers = await prompt(newToolQuestions);\r\n      toolOptions = toolAnswers.options;\r\n    }\r\n  }\r\n\r\n  // Package Config\r\n  let configOptions: string[] = [];\r\n\r\n  // Since we don't support PNPM yet, we need to remove the option to install packages with it\r\n  const userAgent = process.env.npm_config_user_agent;\r\n  const isPNPM = userAgent && userAgent.includes(\"pnpm\");\r\n  const pnpmRemovedConfig = configQuestions.options.choices.filter((object) => object.name !== \"Auto install dependencies\");\r\n\r\n  const correctedConfig = {\r\n    ...configQuestions,\r\n    options: { ...configQuestions.options, choices: isPNPM ? pnpmRemovedConfig : configQuestions.options.choices },\r\n  };\r\n\r\n  if (techOptions.includes(\"Prisma ORM\")) {\r\n    const configAnswers = await prompt(correctedConfig);\r\n    configOptions = configAnswers.options;\r\n  } else {\r\n    // remove Configure database from configOptions\r\n    const newConfigChoices = correctedConfig.options.choices.filter((object) => object.name !== \"Configure database\");\r\n    const newConfigQuestionsRMDB = { ...correctedConfig, options: { ...correctedConfig.options, choices: newConfigChoices } };\r\n\r\n    const configAnswers = await prompt(newConfigQuestionsRMDB);\r\n    configOptions = configAnswers.options;\r\n  }\r\n\r\n  // Database Config\r\n  let requireURI = false;\r\n  let dbSolution = \"none\";\r\n  let dbConfig = null;\r\n\r\n  const needsDatabase = configOptions.includes(\"Configure database\");\r\n  if (configOptions.includes(\"Configure database\")) dbSolution = (await prompt(dbSolutions)).dbSolution;\r\n  if (dbSolution) requireURI = [\"Postgres\", \"MySQL\", \"MongoDB\"].includes(dbSolution);\r\n\r\n  //Handle Empty Options\r\n  if (needsDatabase && requireURI) dbConfig = await prompt(dbQuestions);\r\n  else dbConfig = { dbString: \"none\", dbOperation: \"New Schema\" };\r\n\r\n  //Manage Options\r\n  const template = baseAnswers.template;\r\n  const targetDirectory = baseAnswers.targetDirectory.replace(/( |_)/g, \"-\").toLowerCase();\r\n\r\n  //Tech Stack\r\n  const trpc = techOptions.includes(\"tRPC\");\r\n  const prisma = techOptions.includes(\"Prisma ORM\");\r\n  const scriptLang = techOptions.includes(\"TypeScript\") ? \"TypeScript\" : \"JavaScript\";\r\n  const tailwind = techOptions.includes(\"Tailwind CSS\");\r\n\r\n  //Tooling\r\n  const eslint = toolOptions.includes(\"ESLint\");\r\n  const prettier = toolOptions.includes(\"Prettier\");\r\n  const tailwindPrettier = toolOptions.includes(\"Tailwind Prettier\") && prettier ? true : false;\r\n  const headlessUI = toolOptions.includes(\"Headless UI\");\r\n  const heroIcons = toolOptions.includes(\"HeroIcons\");\r\n\r\n  //Configs\r\n  const git = configOptions.includes(\"Init .git\");\r\n  const runInstall = configOptions.includes(\"Auto install dependencies\");\r\n  const db = configOptions.includes(\"Configure database\");\r\n\r\n  return {\r\n    ...options,\r\n    targetDirectory: targetDirectory || process.cwd(),\r\n    template: options.template || template,\r\n\r\n    //Tech Stack\r\n    scriptLang: scriptLang,\r\n    optionals: {\r\n      trpc: trpc,\r\n      prisma: prisma,\r\n      tailwind: tailwind,\r\n\r\n      //Tooling\r\n      eslint: eslint,\r\n      prettier: prettier,\r\n      tailwindPrettier: tailwindPrettier,\r\n      headlessUI: headlessUI,\r\n      heroIcons: heroIcons,\r\n    },\r\n    //Configs\r\n    git: git,\r\n    runInstall: runInstall,\r\n    db: db,\r\n\r\n    //DB Specific\r\n    dbString: dbConfig.dbString,\r\n    dbOperation: dbConfig.dbOperation,\r\n    dbSolution: dbSolution,\r\n  };\r\n};\r\n\r\nconst cli = async (args: string[]) => {\r\n  const passedOptions = parseArgumentsIntoOptions(args);\r\n  const completeOptions = await promptForMissingOptions(passedOptions);\r\n  await createT3SvelteApp(completeOptions);\r\n};\r\n\r\nexport type MinimalOptions = { template: string; skipPrompts: boolean };\r\nexport type Options = MinimalOptions & {\r\n  targetDirectory: string;\r\n  scriptLang: string;\r\n  optionals: {\r\n    trpc: boolean;\r\n    prisma: boolean;\r\n    tailwind: boolean;\r\n    eslint: boolean;\r\n    prettier: boolean;\r\n    tailwindPrettier: boolean;\r\n    headlessUI: boolean;\r\n    heroIcons: boolean;\r\n  };\r\n  git: boolean;\r\n  runInstall: boolean;\r\n  db: boolean;\r\n  dbString: string;\r\n  dbOperation: string;\r\n  dbSolution: string;\r\n};\r\n\r\nexport default cli;\r\n","import chalk from \"chalk\";\r\nimport fs from \"fs-extra\";\r\nimport path from \"path\";\r\nimport { promisify } from \"util\";\r\nimport { execa } from \"execa\";\r\nimport { fileURLToPath } from \"url\";\r\nimport Listr from \"listr\";\r\nimport { projectInstall } from \"pkg-install\";\r\nimport { exec } from \"child_process\";\r\n\r\nimport { type Options } from \"./cli.js\";\r\n\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst access = promisify(fs.access);\r\n\r\ntype PackageManager = \"npm\" | \"pnpm\" | \"yarn\";\r\nconst getUserPkgManager: () => PackageManager = () => {\r\n  // This environment variable is set by npm and yarn but pnpm seems less consistent\r\n  const userAgent = process.env.npm_config_user_agent;\r\n\r\n  if (userAgent && userAgent.includes(\"yarn\")) return \"yarn\";\r\n  if (userAgent && userAgent.includes(\"pnpm\")) return \"pnpm\";\r\n\r\n  return \"npm\";\r\n};\r\n\r\nconst userPkgManager = getUserPkgManager();\r\nconsole.log(\"Using: %s \", chalk.green.bold(userPkgManager));\r\nconsole.log(\"Warning, PNPM is not supported for installation yet...\\n\");\r\n\r\nconst copyTemplateFiles = async (options: Options & { templateDirectory: string }, templateName = \"overwrites\", templateBaseDir = \"/\") => {\r\n  await fs.copy(options.templateDirectory, options.targetDirectory);\r\n  await fs.writeFile(options.targetDirectory + \"/.npmrc\", \"engine-strict=true\");\r\n  await fs.writeFile(options.targetDirectory + \"/.gitignore\", \".DS_Store\\nnode_modules\\n/build\\n/.svelte-kit\\n/package\\n.env\");\r\n  if (templateName != \"standard\" && templateName != \"overwrites\") await copyOptionalFiles(options, templateBaseDir);\r\n};\r\n\r\nconst copyOptionalFiles = async (options: Options, templateBaseDir: string) => {\r\n  const scriptLang = options.scriptLang.toLowerCase();\r\n\r\n  const selectedOptionals = [];\r\n  for (const [key, value] of Object.entries(options.optionals)) if (value === true) selectedOptionals.push(key);\r\n\r\n  const dirArray = [];\r\n\r\n  /* set dirs for optional additions */\r\n\r\n  //Tech Stack\r\n  if (selectedOptionals.includes(\"prisma\") && selectedOptionals.includes(\"trpc\")) dirArray.push(templateBaseDir + \"+prisma_trpc\");\r\n  else if (selectedOptionals.includes(\"trpc\")) dirArray.push(templateBaseDir + \"+trpc\");\r\n  else if (selectedOptionals.includes(\"prisma\")) dirArray.push(templateBaseDir + \"+prisma\");\r\n\r\n  if (selectedOptionals.includes(\"tailwind\")) dirArray.push(templateBaseDir + \"+tailwind\");\r\n\r\n  //Tooling\r\n  if (selectedOptionals.includes(\"eslint\") && selectedOptionals.includes(\"prettier\")) {\r\n    if (scriptLang == \"typescript\") dirArray.push(templateBaseDir + \"+eslint_prettier_typescript\");\r\n    else dirArray.push(templateBaseDir + \"+eslint_prettier_javascript\");\r\n  } else if (selectedOptionals.includes(\"eslint\")) {\r\n    if (scriptLang == \"typescript\") dirArray.push(templateBaseDir + \"+eslint_typescript\");\r\n    else dirArray.push(templateBaseDir + \"+eslint_javascript\");\r\n  } else if (selectedOptionals.includes(\"prettier\")) dirArray.push(templateBaseDir + \"+prettier\");\r\n\r\n  if (selectedOptionals.includes(\"heroIcons\")) dirArray.push(templateBaseDir + \"+heroicons\");\r\n\r\n  if (selectedOptionals.includes(\"headlessUI\")) dirArray.push(templateBaseDir + \"+headlessui\");\r\n\r\n  if (selectedOptionals.includes(\"tailwindPrettier\")) dirArray.push(templateBaseDir + \"+tailwind_prettier_plugin\");\r\n\r\n  const npmCommands = await compileInstalls(dirArray);\r\n  for (const urlIndex in dirArray) fs.copySync(dirArray[urlIndex]!, options.targetDirectory);\r\n\r\n  for (const commandIndex in npmCommands) {\r\n    await new Promise((resolve, reject) => {\r\n      exec(npmCommands[commandIndex]!, (err, stdout, stderr) => (err ? reject(err) : resolve({ stdout, stderr })));\r\n    });\r\n  }\r\n\r\n  // cleanup package.txt\r\n  fs.removeSync(options.targetDirectory + \"/package.txt\");\r\n};\r\n\r\n// Read package.txt for each optional package to configure package.json\r\nconst compileInstalls = async (dirArray: string[]) => {\r\n  const npmCommands = [];\r\n  for (const urlIndex in dirArray) {\r\n    let lines = fs.readFileSync(dirArray[urlIndex] + \"/package.txt\", \"utf8\").replace(\"\\n\", \"\");\r\n    if (userPkgManager === \"pnpm\") {\r\n      lines = lines\r\n        .replace(/npm/g, \"pnpm\")\r\n        .replace(/--no-package-lock /g, \"\")\r\n        .replace(/--package-lock-only/g, \"--lockfile-only\");\r\n    } else if (userPkgManager === \"yarn\") {\r\n      lines = lines\r\n        .replace(/npm install/g, \"yarn add\")\r\n        .replace(/--no-package-lock /g, \"\")\r\n        .replace(/--package-lock-only/g, \"--mode update-lockfile\");\r\n    }\r\n    npmCommands.push(lines);\r\n  }\r\n  return npmCommands;\r\n};\r\n\r\nconst configureDatabase = async (options: Options & { templateDirectory: string }) => {\r\n  copyEnvFile(options);\r\n\r\n  const operation = options.dbOperation == \"Import Existing Schema\" ? \"pull\" : \"push\";\r\n  const basePath = options.templateDirectory.split(\"/templates\")[0];\r\n  const overwriteFolder = options.dbSolution.toLowerCase();\r\n  const customOptions = {\r\n    ...options,\r\n    targetDirectory: options.targetDirectory,\r\n    templateDirectory: basePath + \"/overwrites/\" + overwriteFolder,\r\n  };\r\n\r\n  const overwriteRequired = [\"postgres\", \"mysql\", \"mongodb\"]; //add DBs requiring overwrite here\r\n  if (overwriteRequired.includes(overwriteFolder))\r\n    //guard clause to only overwrite when needed (Postgres, mySQL, mongodb etc)\r\n    await copyTemplateFiles(customOptions);\r\n\r\n  const resultPull = await execa(\"npx\", [\"prisma\", \"db\", operation], {\r\n    cwd: options.targetDirectory,\r\n  });\r\n  if (operation == \"pull\") {\r\n    const resultGenerate = await execa(\"npx\", [\"prisma\", \"generate\"], {\r\n      cwd: options.targetDirectory,\r\n    });\r\n    if (resultGenerate.failed) return Promise.reject(new Error(\"Failed to intialize DB via Prisma\"));\r\n  }\r\n  if (resultPull.failed) {\r\n    return Promise.reject(new Error(\"Failed to intialize DB via Prisma\"));\r\n  }\r\n  return;\r\n};\r\n\r\nconst copyEnvFile = (options: Options) => {\r\n  const content = `DATABASE_URL=\"${options.dbString}\"`;\r\n  const file = options.targetDirectory + \"/.env\";\r\n  fs.writeFile(file, content, (err) => {\r\n    if (err) throw err;\r\n    return;\r\n  });\r\n};\r\n\r\nconst initGit = async (options: Options) => {\r\n  const result = await execa(\"git\", [\"init\"], {\r\n    cwd: options.targetDirectory,\r\n  });\r\n\r\n  if (!result.failed) return;\r\n\r\n  console.log(\"Failed to init git\");\r\n  return Promise.reject(new Error(\"Failed to initialize git\"));\r\n};\r\n\r\nexport async function createT3SvelteApp(options: Options) {\r\n  const templateBaseDir = path.resolve(__filename, \"../../templates\");\r\n  const templateName = options.template.toLowerCase();\r\n  let templateDir = \"\";\r\n\r\n  if (templateName == \"standard\") templateDir = templateBaseDir + \"/standard\";\r\n  else if (templateName == \"custom: typescript\") templateDir = templateBaseDir + \"/base_typescript\";\r\n  else templateDir = templateBaseDir + \"/base_javascript\";\r\n\r\n  try {\r\n    await access(templateDir);\r\n  } catch (err) {\r\n    console.log(templateDir);\r\n    console.error(\"%s Invalid template name\", chalk.red.bold(\"ERROR\"));\r\n    process.exit(1);\r\n  }\r\n\r\n  const copyTemplateFileOptions = { templateDirectory: templateDir, ...options };\r\n\r\n  const tasks = new Listr([\r\n    {\r\n      title: \"Copy project files\",\r\n      task: () => copyTemplateFiles(copyTemplateFileOptions, templateName, templateBaseDir + \"/\"),\r\n    },\r\n    {\r\n      title: \"Initialize git\",\r\n      task: () => initGit(options),\r\n      enabled: () => options.git,\r\n    },\r\n    {\r\n      title: \"Install dependencies\",\r\n      task: () => {\r\n        projectInstall({\r\n          prefer: userPkgManager as \"npm\" | \"yarn\",\r\n          cwd: options.targetDirectory,\r\n        });\r\n      },\r\n      enabled: () => options.runInstall,\r\n    },\r\n    {\r\n      title: \"Initialize DB\",\r\n      task: () => configureDatabase(copyTemplateFileOptions),\r\n      enabled: () => options.db,\r\n    },\r\n  ]);\r\n\r\n  await tasks.run();\r\n  console.log(\"%s SvelteT3 is ready!\", chalk.green.bold(\"DONE\"));\r\n  return true;\r\n}\r\n","#!/usr/bin/env node\r\nimport cli from \"../src/cli.js\";\r\ncli(process.argv);\r\n"],"mappings":"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","names":["arg","inquirer","chalk","fs","path","promisify","execa","fileURLToPath","Listr","projectInstall","exec","__filename","access","getUserPkgManager","userAgent","userPkgManager","copyTemplateFiles","options","templateName","templateBaseDir","copyOptionalFiles","scriptLang","selectedOptionals","key","value","dirArray","npmCommands","compileInstalls","urlIndex","commandIndex","resolve","reject","err","stdout","stderr","lines","configureDatabase","copyEnvFile","operation","basePath","overwriteFolder","customOptions","resultPull","content","file","initGit","createT3SvelteApp","templateDir","copyTemplateFileOptions","prompt","questions","transformedQuestions","name","question","choices","type","inquirer","parseArgumentsIntoOptions","rawArgs","args","arg","promptForMissingOptions","options","baseQuestions","typeScriptQuestions","javaScriptQuestions","toolQuestions","configQuestions","dbSolutions","dbQuestions","techOptions","toolOptions","isStandard","baseAnswers","newToolChoices","object","newToolQuestions","configOptions","userAgent","isPNPM","pnpmRemovedConfig","correctedConfig","newConfigChoices","newConfigQuestionsRMDB","requireURI","dbSolution","dbConfig","needsDatabase","template","targetDirectory","trpc","prisma","scriptLang","tailwind","eslint","prettier","tailwindPrettier","headlessUI","heroIcons","git","runInstall","db","cli","passedOptions","completeOptions","createT3SvelteApp","cli_default","cli_default"]}