#!/usr/bin/env node
import ce from"arg";import le from"inquirer";import C from"chalk";import d from"fs-extra";import W from"path";import{promisify as $}from"util";import{execa as T}from"execa";import{fileURLToPath as K}from"url";import X from"listr";import{projectInstall as Y}from"pkg-install";import{exec as Z}from"child_process";var ee=K(import.meta.url),te=$(d.access),se=()=>{let e=process.env.npm_config_user_agent;return e&&e.includes("yarn")?"yarn":e&&e.includes("pnpm")?"pnpm":"npm"},b=se();console.log("Using: %s ",C.green.bold(b));console.log(`Warning, PNPM is not supported for installation yet...
`);var x=async(e,t="overwrites",i="/")=>{await d.copy(e.templateDirectory,e.targetDirectory),await d.writeFile(e.targetDirectory+"/.npmrc","engine-strict=true"),await d.writeFile(e.targetDirectory+"/.gitignore",`.DS_Store
node_modules
/build
/.svelte-kit
/package
.env`),t!="standard"&&t!="overwrites"&&await ne(e,i)},ne=async(e,t)=>{let i=e.scriptLang.toLowerCase(),s=[];for(let[o,m]of Object.entries(e.optionals))m===!0&&s.push(o);let n=[];s.includes("prisma")&&s.includes("trpc")?n.push(t+"+prisma_trpc"):s.includes("trpc")?n.push(t+"+trpc"):s.includes("prisma")&&n.push(t+"+prisma"),s.includes("tailwind")&&n.push(t+"+tailwind"),s.includes("eslint")&&s.includes("prettier")?i=="typescript"?n.push(t+"+eslint_prettier_typescript"):n.push(t+"+eslint_prettier_javascript"):s.includes("eslint")?i=="typescript"?n.push(t+"+eslint_typescript"):n.push(t+"+eslint_javascript"):s.includes("prettier")&&n.push(t+"+prettier"),s.includes("heroIcons")&&n.push(t+"+heroicons"),s.includes("headlessUI")&&n.push(t+"+headlessui"),s.includes("tailwindPrettier")&&n.push(t+"+tailwind_prettier_plugin");let r=await ie(n);for(let o in n)d.copySync(n[o],e.targetDirectory);for(let o in r)await new Promise((m,S)=>{Z(r[o],(a,c,g)=>a?S(a):m({stdout:c,stderr:g}))});d.removeSync(e.targetDirectory+"/package.txt")},ie=async e=>{let t=[];for(let i in e){let s=d.readFileSync(e[i]+"/package.txt","utf8").replace(`
`,"");b==="pnpm"?s=s.replace(/npm/g,"pnpm").replace(/--no-package-lock /g,"").replace(/--package-lock-only/g,"--lockfile-only"):b==="yarn"&&(s=s.replace(/npm install/g,"yarn add").replace(/--no-package-lock /g,"").replace(/--package-lock-only/g,"--mode update-lockfile")),t.push(s)}return t},oe=async e=>{re(e);let t=e.dbOperation=="Import Existing Schema"?"pull":"push",i=e.templateDirectory.split("/templates")[0],s=e.dbSolution.toLowerCase(),n={...e,targetDirectory:e.targetDirectory,templateDirectory:i+"/overwrites/"+s};["postgres","mysql","mongodb"].includes(s)&&await x(n);let o=await T("npx",["prisma","db",t],{cwd:e.targetDirectory});if(t=="pull"&&(await T("npx",["prisma","generate"],{cwd:e.targetDirectory})).failed)return Promise.reject(new Error("Failed to intialize DB via Prisma"));if(o.failed)return Promise.reject(new Error("Failed to intialize DB via Prisma"))},re=e=>{let t=`DATABASE_URL="${e.dbString}"`,i=e.targetDirectory+"/.env";d.writeFile(i,t,s=>{if(s)throw s})},ae=async e=>{if(!!(await T("git",["init"],{cwd:e.targetDirectory})).failed)return console.log("Failed to init git"),Promise.reject(new Error("Failed to initialize git"))};async function D(e){let t=W.resolve(ee,"../../templates"),i=e.template.toLowerCase(),s="";i=="standard"?s=t+"/standard":i=="custom: typescript"?s=t+"/base_typescript":s=t+"/base_javascript";try{await te(s)}catch{console.log(s),console.error("%s Invalid template name",C.red.bold("ERROR")),process.exit(1)}let n={templateDirectory:s,...e};return await new X([{title:"Copy project files",task:()=>x(n,i,t+"/")},{title:"Initialize git",task:()=>ae(e),enabled:()=>e.git},{title:"Install dependencies",task:()=>{Y({prefer:b,cwd:e.targetDirectory})},enabled:()=>e.runInstall},{title:"Initialize DB",task:()=>oe(n),enabled:()=>e.db}]).run(),console.log("%s SvelteT3 is ready!",C.green.bold("DONE")),!0}var l=async e=>{let t=Object.entries(e).map(([s,n])=>{let r=n.choices,o=r?typeof r[0]=="string"?"list":"checkbox":n.mask?"password":"input";return{...n,name:s,type:o}});return await le.prompt(t)},pe=e=>{let t=ce({"--yes":Boolean},{argv:e.slice(2)});return{skipPrompts:t["--yes"]||!1,template:t._[0]}},de=async e=>{let i={targetDirectory:{message:"Please choose project name:"},template:{message:"Please choose which project template to use",choices:["TypeScript","JavaScript"],default:"TypeScript"}},s={options:{message:"Please choose tech stack options",choices:[{name:"tRPC",checked:!0},{name:"Prisma ORM",checked:!0},{name:"Tailwind CSS",checked:!0}]}},n={options:{message:"Please choose tech stack options",choices:[{name:"Prisma ORM",checked:!0},{name:"Tailwind CSS",checked:!0}]}},r={options:{message:"Please choose tech stack options",choices:[{name:"ESLint",checked:!0},{name:"Prettier",checked:!0},{name:"Tailwind Prettier",checked:!0},{name:"Headless UI"},{name:"HeroIcons"}]}},o={options:{message:"Please choose config options",choices:[{name:"Configure database",checked:!0},{name:"Init .git",checked:!0},{name:"Auto install dependencies",checked:!0}]}},m={dbSolution:{message:"What DB technology are you using? (first 3 require URI string)",choices:["Postgres","MySQL","MongoDB","SQLite","Other"],default:"Postgres"}},S={dbString:{mask:!0,message:"Enter Full DB URI String:"},dbOperation:{message:"Init new DB schema (blank DB) or import schema from existing DB?",choices:["New Schema","Import Existing Schema"],default:"New Schema"}},a=["tRPC","Prisma ORM","Tailwind CSS","TypeScript"],c=["ESLint","Prettier","Tailwind Prettier"],g=!1,k=await l(i);switch(k.template){case"TypeScript":a=[...(await l(s)).options,"TypeScript"];break;case"JavaScript":a=[...(await l(n)).options,"JavaScript"];break;default:g=!0}if(!g)if(a.includes("Tailwind CSS"))c=(await l(r)).options;else{let p=r.options.choices.filter(P=>P.name!=="Tailwind Prettier"),w={...r,options:{...r.options,choices:p}};c=(await l(w)).options}let u=[],I=process.env.npm_config_user_agent,R=I&&I.includes("pnpm"),L=o.options.choices.filter(p=>p.name!=="Auto install dependencies"),f={...o,options:{...o.options,choices:R?L:o.options.choices}};if(a.includes("Prisma ORM"))u=(await l(f)).options;else{let p=f.options.choices.filter(P=>P.name!=="Configure database"),w={...f,options:{...f.options,choices:p}};u=(await l(w)).options}let O=!1,h="none",y=null,_=u.includes("Configure database");u.includes("Configure database")&&(h=(await l(m)).dbSolution),h&&(O=["Postgres","MySQL","MongoDB"].includes(h)),_&&O?y=await l(S):y={dbString:"none",dbOperation:"New Schema"};let M=k.template,Q=k.targetDirectory.replace(/( |_)/g,"-").toLowerCase(),j=a.includes("tRPC"),F=a.includes("Prisma ORM"),E=a.includes("TypeScript")?"TypeScript":"JavaScript",U=a.includes("Tailwind CSS"),B=c.includes("ESLint"),v=c.includes("Prettier"),q=!!(c.includes("Tailwind Prettier")&&v),N=c.includes("Headless UI"),z=c.includes("HeroIcons"),H=u.includes("Init .git"),J=u.includes("Auto install dependencies"),G=u.includes("Configure database");return{...e,targetDirectory:Q||process.cwd(),template:e.template||M,scriptLang:E,optionals:{trpc:j,prisma:F,tailwind:U,eslint:B,prettier:v,tailwindPrettier:q,headlessUI:N,heroIcons:z},git:H,runInstall:J,db:G,dbString:y.dbString,dbOperation:y.dbOperation,dbSolution:h}},ue=async e=>{let t=pe(e),i=await de(t);await D(i)},A=ue;A(process.argv);
//# sourceMappingURL=index.js.map